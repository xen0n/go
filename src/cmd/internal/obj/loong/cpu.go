// Copyright 2021 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package loong

import "cmd/internal/obj"

//go:generate go run ../stringer.go -i $GOFILE -o anames.go -p loong

const (
	// Integer register numberings.
	REG_R0 = obj.RBaseLoong + iota
	REG_R1
	REG_R2
	REG_R3
	REG_R4
	REG_R5
	REG_R6
	REG_R7
	REG_R8
	REG_R9
	REG_R10
	REG_R11
	REG_R12
	REG_R13
	REG_R14
	REG_R15
	REG_R16
	REG_R17
	REG_R18
	REG_R19
	REG_R20
	REG_R21
	REG_R22
	REG_R23
	REG_R24
	REG_R25
	REG_R26
	REG_R27
	REG_R28
	REG_R29
	REG_R30
	REG_R31

	// FP register numberings.
	REG_F0
	REG_F1
	REG_F2
	REG_F3
	REG_F4
	REG_F5
	REG_F6
	REG_F7
	REG_F8
	REG_F9
	REG_F10
	REG_F11
	REG_F12
	REG_F13
	REG_F14
	REG_F15
	REG_F16
	REG_F17
	REG_F18
	REG_F19
	REG_F20
	REG_F21
	REG_F22
	REG_F23
	REG_F24
	REG_F25
	REG_F26
	REG_F27
	REG_F28
	REG_F29
	REG_F30
	REG_F31

	// FP condition code register numberings.
	REG_FCC0
	REG_FCC1
	REG_FCC2
	REG_FCC3
	REG_FCC4
	REG_FCC5
	REG_FCC6
	REG_FCC7

	// This marks the end of the register numbering.
	REG_END

	// ABI name aliases for registers.
	REG_ZERO     = REG_R0
	REG_RA       = REG_R1 // aka REG_LR
	REG_TP       = REG_R2
	REG_SP       = REG_R3
	REG_A0       = REG_R4
	REG_A1       = REG_R5
	REG_A2       = REG_R6
	REG_A3       = REG_R7
	REG_A4       = REG_R8
	REG_A5       = REG_R9
	REG_A6       = REG_R10
	REG_A7       = REG_R11
	REG_T0       = REG_R12
	REG_T1       = REG_R13
	REG_T2       = REG_R14
	REG_T3       = REG_R15
	REG_T4       = REG_R16
	REG_T5       = REG_R17
	REG_T6       = REG_R18
	REG_T7       = REG_R19
	REG_T8       = REG_R20 // aka REG_TMP
	REG_RESERVED = REG_R21
	REG_FP       = REG_R22
	REG_S0       = REG_R23
	REG_S1       = REG_R24
	REG_S2       = REG_R25
	REG_S3       = REG_R26
	REG_S4       = REG_R27
	REG_S5       = REG_R28
	REG_S6       = REG_R29
	REG_S7       = REG_R30 // aka REG_CTXT
	REG_S8       = REG_R31 // aka REG_G

	REG_FA0  = REG_F0
	REG_FA1  = REG_F1
	REG_FA2  = REG_F2
	REG_FA3  = REG_F3
	REG_FA4  = REG_F4
	REG_FA5  = REG_F5
	REG_FA6  = REG_F6
	REG_FA7  = REG_F7
	REG_FT0  = REG_F8
	REG_FT1  = REG_F9
	REG_FT2  = REG_F10
	REG_FT3  = REG_F11
	REG_FT4  = REG_F12
	REG_FT5  = REG_F13
	REG_FT6  = REG_F14
	REG_FT7  = REG_F15
	REG_FT8  = REG_F16
	REG_FT9  = REG_F17
	REG_FT10 = REG_F18
	REG_FT11 = REG_F19
	REG_FT12 = REG_F20
	REG_FT13 = REG_F21
	REG_FT14 = REG_F22
	REG_FT15 = REG_F23
	REG_FS0  = REG_F24
	REG_FS1  = REG_F25
	REG_FS2  = REG_F26
	REG_FS3  = REG_F27
	REG_FS4  = REG_F28
	REG_FS5  = REG_F29
	REG_FS6  = REG_F30
	REG_FS7  = REG_F31

	// Go runtime register names.
	REG_G    = REG_S8
	REG_CTXT = REG_S7
	REG_LR   = REG_RA
	REG_TMP  = REG_T8

	// Names generated by the SSA compiler.
	REGSP = REG_SP
	REGG  = REG_G
)

var loong64DWARFRegisters = map[int16]int16{
	// Integer registers.
	REG_R0:  0,
	REG_R1:  1,
	REG_R2:  2,
	REG_R3:  3,
	REG_R4:  4,
	REG_R5:  5,
	REG_R6:  6,
	REG_R7:  7,
	REG_R8:  8,
	REG_R9:  9,
	REG_R10: 10,
	REG_R11: 11,
	REG_R12: 12,
	REG_R13: 13,
	REG_R14: 14,
	REG_R15: 15,
	REG_R16: 16,
	REG_R17: 17,
	REG_R18: 18,
	REG_R19: 19,
	REG_R20: 20,
	REG_R21: 21,
	REG_R22: 22,
	REG_R23: 23,
	REG_R24: 24,
	REG_R25: 25,
	REG_R26: 26,
	REG_R27: 27,
	REG_R28: 28,
	REG_R29: 29,
	REG_R30: 30,
	REG_R31: 31,

	// FP registers.
	REG_F0:  32,
	REG_F1:  33,
	REG_F2:  34,
	REG_F3:  35,
	REG_F4:  36,
	REG_F5:  37,
	REG_F6:  38,
	REG_F7:  39,
	REG_F8:  40,
	REG_F9:  41,
	REG_F10: 42,
	REG_F11: 43,
	REG_F12: 44,
	REG_F13: 45,
	REG_F14: 46,
	REG_F15: 47,
	REG_F16: 48,
	REG_F17: 49,
	REG_F18: 50,
	REG_F19: 51,
	REG_F20: 52,
	REG_F21: 53,
	REG_F22: 54,
	REG_F23: 55,
	REG_F24: 56,
	REG_F25: 57,
	REG_F26: 58,
	REG_F27: 59,
	REG_F28: 60,
	REG_F29: 61,
	REG_F30: 62,
	REG_F31: 63,
}

// LoongArch instruction mnemonics.
//
// If you modify this table, you MUST run 'go generate' to regenerate anames.go!
const (
	ACLOW = obj.ABaseLoong + obj.A_ARCHSPECIFIC + iota
	ACLZW
	ACTOW
	ACTZW
	ACLOD
	ACLZD
	ACTOD
	ACTZD
	AREVB2H
	AREVB4H
	AREVB2W
	AREVBD
	AREVH2W
	AREVHD
	ABITREV4B
	ABITREV8B
	ABITREVW
	ABITREVD
	ASEXTH
	ASEXTB
	ARDTICKLW
	ARDTICKHW
	ARDTICKD
	ACPUCFG
	AASRTLE
	AASRTGT
	AALSLW
	AALSLWU
	ABYTEPICKW
	ABYTEPICKD
	AADDW
	AADDD
	ASUBW
	ASUBD
	ASLT
	ASLTU
	AMASKEQZ
	AMASKNEZ
	ANOR
	AAND
	AOR
	AXOR
	AORN
	AANDN
	ASLLW
	ASRLW
	ASRAW
	ASLLD
	ASRLD
	ASRAD
	AROTRW
	AROTRD
	AMULW
	AMULHW
	AMULHWU
	AMULD
	AMULHD
	AMULHDU
	AMULWDW
	AMULWDWU
	ADIVW
	AMODW
	ADIVWU
	AMODWU
	ADIVD
	AMODD
	ADIVDU
	AMODDU
	ACRCWBW
	ACRCWHW
	ACRCWWW
	ACRCWDW
	ACRCCWBW
	ACRCCWHW
	ACRCCWWW
	ACRCCWDW
	ABREAK
	ADBGCALL
	ASYSCALL
	AALSLD
	ASLLIW
	ASLLID
	ASRLIW
	ASRLID
	ASRAIW
	ASRAID
	AROTRIW
	AROTRID
	ABSTRINSW
	ABSTRPICKW
	ABSTRINSD
	ABSTRPICKD
	AFADDS
	AFADDD
	AFSUBS
	AFSUBD
	AFMULS
	AFMULD
	AFDIVS
	AFDIVD
	AFMAXS
	AFMAXD
	AFMINS
	AFMIND
	AFMAXAS
	AFMAXAD
	AFMINAS
	AFMINAD
	AFSCALEBS
	AFSCALEBD
	AFCOPYSIGNS
	AFCOPYSIGND
	AFABSS
	AFABSD
	AFNEGS
	AFNEGD
	AFLOGBS
	AFLOGBD
	AFCLASSS
	AFCLASSD
	AFSQRTS
	AFSQRTD
	AFRECIPS
	AFRECIPD
	AFRSQRTS
	AFRSQRTD
	AFMOVS
	AFMOVD
	AMOVGR2FRW
	AMOVGR2FRD
	AMOVGR2FRHW
	AMOVFR2GRS
	AMOVFR2GRD
	AMOVFRH2GRS
	AFCSRWR
	AFCSRRD
	AMOVFR2FCC
	AMOVFCC2FR
	AMOVGR2FCC
	AMOVFCC2GR
	AFCVTSD
	AFCVTDS
	AFTINTRMWS
	AFTINTRMWD
	AFTINTRMLS
	AFTINTRMLD
	AFTINTRPWS
	AFTINTRPWD
	AFTINTRPLS
	AFTINTRPLD
	AFTINTRZWS
	AFTINTRZWD
	AFTINTRZLS
	AFTINTRZLD
	AFTINTRNEWS
	AFTINTRNEWD
	AFTINTRNELS
	AFTINTRNELD
	AFTINTWS
	AFTINTWD
	AFTINTLS
	AFTINTLD
	AFFINTSW
	AFFINTSL
	AFFINTDW
	AFFINTDL
	AFRINTS
	AFRINTD
	ASLTI
	ASLTUI
	AADDIW
	AADDID
	ALU52ID
	AANDI
	AORI
	AXORI
	ACSRXCHG
	ACACOP
	ALDDIR
	ALDPTE
	AIOCSRRDB
	AIOCSRRDH
	AIOCSRRDW
	AIOCSRRDD
	AIOCSRWRB
	AIOCSRWRH
	AIOCSRWRW
	AIOCSRWRD
	ATLBCLR
	ATLBFLUSH
	ATLBSRCH
	ATLBRD
	ATLBWR
	ATLBFILL
	AERET
	AIDLE
	ATLBINV
	AFMADDS
	AFMADDD
	AFMSUBS
	AFMSUBD
	AFNMADDS
	AFNMADDD
	AFNMSUBS
	AFNMSUBD
	AFCMPCAFS
	AFCMPSAFS
	AFCMPCLTS
	AFCMPSLTS
	AFCMPCEQS
	AFCMPSEQS
	AFCMPCLES
	AFCMPSLES
	AFCMPCUNS
	AFCMPSUNS
	AFCMPCULTS
	AFCMPSULTS
	AFCMPCUEQS
	AFCMPSUEQS
	AFCMPCULES
	AFCMPSULES
	AFCMPCNES
	AFCMPSNES
	AFCMPCORS
	AFCMPSORS
	AFCMPCUNES
	AFCMPSUNES
	AFCMPCAFD
	AFCMPSAFD
	AFCMPCLTD
	AFCMPSLTD
	AFCMPCEQD
	AFCMPSEQD
	AFCMPCLED
	AFCMPSLED
	AFCMPCUND
	AFCMPSUND
	AFCMPCULTD
	AFCMPSULTD
	AFCMPCUEQD
	AFCMPSUEQD
	AFCMPCULED
	AFCMPSULED
	AFCMPCNED
	AFCMPSNED
	AFCMPCORD
	AFCMPSORD
	AFCMPCUNED
	AFCMPSUNED
	AFSEL
	AADDU16ID
	ALU12IW
	ALU32ID
	APCADDI
	APCALAU12I
	APCADDU12I
	APCADDU18I
	ALLW
	ASCW
	ALLD
	ASCD
	ALDOX4W
	ASTOX4W
	ALDOX4D
	ASTOX4D
	ALDB
	ALDH
	ALDW
	ALDD
	ASTB
	ASTH
	ASTW
	ASTD
	ALDBU
	ALDHU
	ALDWU
	APRELD
	AFLDS
	AFSTS
	AFLDD
	AFSTD
	ALDXB
	ALDXH
	ALDXW
	ALDXD
	ASTXB
	ASTXH
	ASTXW
	ASTXD
	ALDXBU
	ALDXHU
	ALDXWU
	APRELDX
	AFLDXS
	AFLDXD
	AFSTXS
	AFSTXD
	AAMSWAPW
	AAMSWAPD
	AAMADDW
	AAMADDD
	AAMANDW
	AAMANDD
	AAMORW
	AAMORD
	AAMXORW
	AAMXORD
	AAMMAXW
	AAMMAXD
	AAMMINW
	AAMMIND
	AAMMAXWU
	AAMMAXDU
	AAMMINWU
	AAMMINDU
	AAMSWAPDBW
	AAMSWAPDBD
	AAMADDDBW
	AAMADDDBD
	AAMANDDBW
	AAMANDDBD
	AAMORDBW
	AAMORDBD
	AAMXORDBW
	AAMXORDBD
	AAMMAXDBW
	AAMMAXDBD
	AAMMINDBW
	AAMMINDBD
	AAMMAXDBWU
	AAMMAXDBDU
	AAMMINDBWU
	AAMMINDBDU
	ADBAR
	AIBAR
	AFLDGTS
	AFLDGTD
	AFLDLES
	AFLDLED
	AFSTGTS
	AFSTGTD
	AFSTLES
	AFSTLED
	ALDGTB
	ALDGTH
	ALDGTW
	ALDGTD
	ALDLEB
	ALDLEH
	ALDLEW
	ALDLED
	ASTGTB
	ASTGTH
	ASTGTW
	ASTGTD
	ASTLEB
	ASTLEH
	ASTLEW
	ASTLED
	ABEQZ
	ABNEZ
	ABCEQZ
	ABCNEZ
	AJIRL
	AB
	ABL
	ABEQ
	ABNE
	ABGT
	ABLE
	ABGTU
	ABLEU

	// The escape hatch. Inserts a single 32-bit word.
	AWORD

	// Other pseudo-instructions.
	// Please keep the list alphabetically sorted.

	// Moves; MOV is the native-width move.
	AMOV
	AMOVB
	AMOVBU
	AMOVH
	AMOVHU
	AMOVW
	AMOVWU

	// End marker
	ALAST
)
