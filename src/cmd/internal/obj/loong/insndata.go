// Code generated by geninsndata from loongson-community/loongarch-opcodes; DO NOT EDIT.

package loong

import "cmd/internal/obj"

type insnFormat int

const (
	insnFormatUnknown insnFormat = iota
	insnFormatCdFj
	insnFormatCdFjFk
	insnFormatCdJ
	insnFormatCjSd5k16
	insnFormatDCj
	insnFormatDFj
	insnFormatDJ
	insnFormatDJK
	insnFormatDJKUa2
	insnFormatDJKUa3
	insnFormatDJSk12
	insnFormatDJSk14
	insnFormatDJSk16
	insnFormatDJUk12
	insnFormatDJUk14
	insnFormatDJUk5
	insnFormatDJUk5Um5
	insnFormatDJUk6
	insnFormatDJUk6Um6
	insnFormatDJUk8
	insnFormatDSj20
	insnFormatDUj5
	insnFormatEMPTY
	insnFormatFdCj
	insnFormatFdFj
	insnFormatFdFjFk
	insnFormatFdFjFkCa
	insnFormatFdFjFkFa
	insnFormatFdJ
	insnFormatFdJK
	insnFormatFdJSk12
	insnFormatJK
	insnFormatJKUd5
	insnFormatJSd5k16
	insnFormatJUd5
	insnFormatJUd5Sk12
	insnFormatJUk8
	insnFormatSd10k16
	insnFormatUd15
)

func (f insnFormat) arity() int {
	switch f {
	case insnFormatEMPTY:
		return 0
	case insnFormatSd10k16,
		insnFormatUd15:
		return 1
	case insnFormatCdFj,
		insnFormatCdJ,
		insnFormatCjSd5k16,
		insnFormatDCj,
		insnFormatDFj,
		insnFormatDJ,
		insnFormatDSj20,
		insnFormatDUj5,
		insnFormatFdCj,
		insnFormatFdFj,
		insnFormatFdJ,
		insnFormatJK,
		insnFormatJSd5k16,
		insnFormatJUd5,
		insnFormatJUk8:
		return 2
	case insnFormatCdFjFk,
		insnFormatDJK,
		insnFormatDJSk12,
		insnFormatDJSk14,
		insnFormatDJSk16,
		insnFormatDJUk12,
		insnFormatDJUk14,
		insnFormatDJUk5,
		insnFormatDJUk6,
		insnFormatDJUk8,
		insnFormatFdFjFk,
		insnFormatFdJK,
		insnFormatFdJSk12,
		insnFormatJKUd5,
		insnFormatJUd5Sk12:
		return 3
	case insnFormatDJKUa2,
		insnFormatDJKUa3,
		insnFormatDJUk5Um5,
		insnFormatDJUk6Um6,
		insnFormatFdFjFkCa,
		insnFormatFdFjFkFa:
		return 4
	}

	panic("unknown insn format")
}

func validateCdFj(insn *instruction) error {
	if err := wantFCCReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateCdFjFk(insn *instruction) error {
	if err := wantFCCReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rk); err != nil {
		return err
	}
	return nil
}

func validateCdJ(insn *instruction) error {
	if err := wantFCCReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateCjSd5k16(insn *instruction) error {
	if err := wantFCCReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm1, 21); err != nil {
		return err
	}
	return nil
}

func validateDCj(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFCCReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateDFj(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateDJ(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateDJK(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rk); err != nil {
		return err
	}
	return nil
}

func validateDJKUa2(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rk); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 2); err != nil {
		return err
	}
	return nil
}

func validateDJKUa3(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rk); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 3); err != nil {
		return err
	}
	return nil
}

func validateDJSk12(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm1, 12); err != nil {
		return err
	}
	return nil
}

func validateDJSk14(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm1, 14); err != nil {
		return err
	}
	return nil
}

func validateDJSk16(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm1, 16); err != nil {
		return err
	}
	return nil
}

func validateDJUk12(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 12); err != nil {
		return err
	}
	return nil
}

func validateDJUk14(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 14); err != nil {
		return err
	}
	return nil
}

func validateDJUk5(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 5); err != nil {
		return err
	}
	return nil
}

func validateDJUk5Um5(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 5); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm2, 5); err != nil {
		return err
	}
	return nil
}

func validateDJUk6(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 6); err != nil {
		return err
	}
	return nil
}

func validateDJUk6Um6(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 6); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm2, 6); err != nil {
		return err
	}
	return nil
}

func validateDJUk8(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 8); err != nil {
		return err
	}
	return nil
}

func validateDSj20(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm1, 20); err != nil {
		return err
	}
	return nil
}

func validateDUj5(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 5); err != nil {
		return err
	}
	return nil
}

func validateEMPTY(insn *instruction) error {
	return nil
}

func validateFdCj(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFCCReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateFdFj(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateFdFjFk(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rk); err != nil {
		return err
	}
	return nil
}

func validateFdFjFkCa(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rk); err != nil {
		return err
	}
	if err := wantFCCReg(insn.as, insn.ra); err != nil {
		return err
	}
	return nil
}

func validateFdFjFkFa(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.rk); err != nil {
		return err
	}
	if err := wantFPReg(insn.as, insn.ra); err != nil {
		return err
	}
	return nil
}

func validateFdJ(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	return nil
}

func validateFdJK(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rk); err != nil {
		return err
	}
	return nil
}

func validateFdJSk12(insn *instruction) error {
	if err := wantFPReg(insn.as, insn.rd); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm1, 12); err != nil {
		return err
	}
	return nil
}

func validateJK(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rk); err != nil {
		return err
	}
	return nil
}

func validateJKUd5(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantIntReg(insn.as, insn.rk); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 5); err != nil {
		return err
	}
	return nil
}

func validateJSd5k16(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm1, 21); err != nil {
		return err
	}
	return nil
}

func validateJUd5(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 5); err != nil {
		return err
	}
	return nil
}

func validateJUd5Sk12(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 5); err != nil {
		return err
	}
	if err := wantSignedImm(insn.as, insn.imm2, 12); err != nil {
		return err
	}
	return nil
}

func validateJUk8(insn *instruction) error {
	if err := wantIntReg(insn.as, insn.rj); err != nil {
		return err
	}
	if err := wantUnsignedImm(insn.as, insn.imm1, 8); err != nil {
		return err
	}
	return nil
}

func validateSd10k16(insn *instruction) error {
	if err := wantSignedImm(insn.as, insn.imm1, 26); err != nil {
		return err
	}
	return nil
}

func validateUd15(insn *instruction) error {
	if err := wantUnsignedImm(insn.as, insn.imm1, 15); err != nil {
		return err
	}
	return nil
}

var validators = [...]func(*instruction) error{
	insnFormatCdFj:     validateCdFj,
	insnFormatCdFjFk:   validateCdFjFk,
	insnFormatCdJ:      validateCdJ,
	insnFormatCjSd5k16: validateCjSd5k16,
	insnFormatDCj:      validateDCj,
	insnFormatDFj:      validateDFj,
	insnFormatDJ:       validateDJ,
	insnFormatDJK:      validateDJK,
	insnFormatDJKUa2:   validateDJKUa2,
	insnFormatDJKUa3:   validateDJKUa3,
	insnFormatDJSk12:   validateDJSk12,
	insnFormatDJSk14:   validateDJSk14,
	insnFormatDJSk16:   validateDJSk16,
	insnFormatDJUk12:   validateDJUk12,
	insnFormatDJUk14:   validateDJUk14,
	insnFormatDJUk5:    validateDJUk5,
	insnFormatDJUk5Um5: validateDJUk5Um5,
	insnFormatDJUk6:    validateDJUk6,
	insnFormatDJUk6Um6: validateDJUk6Um6,
	insnFormatDJUk8:    validateDJUk8,
	insnFormatDSj20:    validateDSj20,
	insnFormatDUj5:     validateDUj5,
	insnFormatEMPTY:    validateEMPTY,
	insnFormatFdCj:     validateFdCj,
	insnFormatFdFj:     validateFdFj,
	insnFormatFdFjFk:   validateFdFjFk,
	insnFormatFdFjFkCa: validateFdFjFkCa,
	insnFormatFdFjFkFa: validateFdFjFkFa,
	insnFormatFdJ:      validateFdJ,
	insnFormatFdJK:     validateFdJK,
	insnFormatFdJSk12:  validateFdJSk12,
	insnFormatJK:       validateJK,
	insnFormatJKUd5:    validateJKUd5,
	insnFormatJSd5k16:  validateJSd5k16,
	insnFormatJUd5:     validateJUd5,
	insnFormatJUd5Sk12: validateJUd5Sk12,
	insnFormatJUk8:     validateJUk8,
	insnFormatSd10k16:  validateSd10k16,
	insnFormatUd15:     validateUd15,
}

func encodeDSlot(bits uint32, d uint32) uint32 {
	return bits | d
}

func encodeDJSlots(bits uint32, d uint32, j uint32) uint32 {
	return bits | d | j<<5
}

func encodeDJKSlots(bits uint32, d uint32, j uint32, k uint32) uint32 {
	return bits | d | j<<5 | k<<10
}

func encodeDJKASlots(bits uint32, d uint32, j uint32, k uint32, a uint32) uint32 {
	return bits | d | j<<5 | k<<10 | a<<15
}

func encodeDJKMSlots(bits uint32, d uint32, j uint32, k uint32, m uint32) uint32 {
	return bits | d | j<<5 | k<<10 | m<<16
}

func encodeDKSlots(bits uint32, d uint32, k uint32) uint32 {
	return bits | d | k<<10
}

func encodeJKSlots(bits uint32, j uint32, k uint32) uint32 {
	return bits | j<<5 | k<<10
}

func (insn *instruction) encodeReal() (uint32, error) {
	enc, err := encodingForAs(insn.as)
	if err != nil {
		return 0, err
	}

	switch enc.fmt {
	case insnFormatCdFj:
		cd := regFCC(insn.rd)
		fj := regFP(insn.rj)
		return encodeDJSlots(enc.bits, cd, fj), nil
	case insnFormatCdFjFk:
		cd := regFCC(insn.rd)
		fj := regFP(insn.rj)
		fk := regFP(insn.rk)
		return encodeDJKSlots(enc.bits, cd, fj, fk), nil
	case insnFormatCdJ:
		cd := regFCC(insn.rd)
		j := regInt(insn.rj)
		return encodeDJSlots(enc.bits, cd, j), nil
	case insnFormatCjSd5k16:
		cj := regFCC(insn.rj)
		sd5k16 := uint32(insn.imm1) & 0x1fffff
		return encodeDJKSlots(enc.bits, sd5k16>>16&0x1f, cj, sd5k16&0xffff), nil
	case insnFormatDCj:
		d := regInt(insn.rd)
		cj := regFCC(insn.rj)
		return encodeDJSlots(enc.bits, d, cj), nil
	case insnFormatDFj:
		d := regInt(insn.rd)
		fj := regFP(insn.rj)
		return encodeDJSlots(enc.bits, d, fj), nil
	case insnFormatDJ:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		return encodeDJSlots(enc.bits, d, j), nil
	case insnFormatDJK:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		k := regInt(insn.rk)
		return encodeDJKSlots(enc.bits, d, j, k), nil
	case insnFormatDJKUa2:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		k := regInt(insn.rk)
		ua2 := uint32(insn.imm1) & 0x3
		return encodeDJKASlots(enc.bits, d, j, k, ua2), nil
	case insnFormatDJKUa3:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		k := regInt(insn.rk)
		ua3 := uint32(insn.imm1) & 0x7
		return encodeDJKASlots(enc.bits, d, j, k, ua3), nil
	case insnFormatDJSk12:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		sk12 := uint32(insn.imm1) & 0xfff
		return encodeDJKSlots(enc.bits, d, j, sk12), nil
	case insnFormatDJSk14:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		sk14 := uint32(insn.imm1) & 0x3fff
		return encodeDJKSlots(enc.bits, d, j, sk14), nil
	case insnFormatDJSk16:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		sk16 := uint32(insn.imm1) & 0xffff
		return encodeDJKSlots(enc.bits, d, j, sk16), nil
	case insnFormatDJUk12:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		uk12 := uint32(insn.imm1) & 0xfff
		return encodeDJKSlots(enc.bits, d, j, uk12), nil
	case insnFormatDJUk14:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		uk14 := uint32(insn.imm1) & 0x3fff
		return encodeDJKSlots(enc.bits, d, j, uk14), nil
	case insnFormatDJUk5:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		uk5 := uint32(insn.imm1) & 0x1f
		return encodeDJKSlots(enc.bits, d, j, uk5), nil
	case insnFormatDJUk5Um5:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		uk5 := uint32(insn.imm1) & 0x1f
		um5 := uint32(insn.imm2) & 0x1f
		return encodeDJKMSlots(enc.bits, d, j, uk5, um5), nil
	case insnFormatDJUk6:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		uk6 := uint32(insn.imm1) & 0x3f
		return encodeDJKSlots(enc.bits, d, j, uk6), nil
	case insnFormatDJUk6Um6:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		uk6 := uint32(insn.imm1) & 0x3f
		um6 := uint32(insn.imm2) & 0x3f
		return encodeDJKMSlots(enc.bits, d, j, uk6, um6), nil
	case insnFormatDJUk8:
		d := regInt(insn.rd)
		j := regInt(insn.rj)
		uk8 := uint32(insn.imm1) & 0xff
		return encodeDJKSlots(enc.bits, d, j, uk8), nil
	case insnFormatDSj20:
		d := regInt(insn.rd)
		sj20 := uint32(insn.imm1) & 0xfffff
		return encodeDJSlots(enc.bits, d, sj20), nil
	case insnFormatDUj5:
		d := regInt(insn.rd)
		uj5 := uint32(insn.imm1) & 0x1f
		return encodeDJSlots(enc.bits, d, uj5), nil
	case insnFormatEMPTY:
		return enc.bits, nil
	case insnFormatFdCj:
		fd := regFP(insn.rd)
		cj := regFCC(insn.rj)
		return encodeDJSlots(enc.bits, fd, cj), nil
	case insnFormatFdFj:
		fd := regFP(insn.rd)
		fj := regFP(insn.rj)
		return encodeDJSlots(enc.bits, fd, fj), nil
	case insnFormatFdFjFk:
		fd := regFP(insn.rd)
		fj := regFP(insn.rj)
		fk := regFP(insn.rk)
		return encodeDJKSlots(enc.bits, fd, fj, fk), nil
	case insnFormatFdFjFkCa:
		fd := regFP(insn.rd)
		fj := regFP(insn.rj)
		fk := regFP(insn.rk)
		ca := regFCC(insn.ra)
		return encodeDJKASlots(enc.bits, fd, fj, fk, ca), nil
	case insnFormatFdFjFkFa:
		fd := regFP(insn.rd)
		fj := regFP(insn.rj)
		fk := regFP(insn.rk)
		fa := regFP(insn.ra)
		return encodeDJKASlots(enc.bits, fd, fj, fk, fa), nil
	case insnFormatFdJ:
		fd := regFP(insn.rd)
		j := regInt(insn.rj)
		return encodeDJSlots(enc.bits, fd, j), nil
	case insnFormatFdJK:
		fd := regFP(insn.rd)
		j := regInt(insn.rj)
		k := regInt(insn.rk)
		return encodeDJKSlots(enc.bits, fd, j, k), nil
	case insnFormatFdJSk12:
		fd := regFP(insn.rd)
		j := regInt(insn.rj)
		sk12 := uint32(insn.imm1) & 0xfff
		return encodeDJKSlots(enc.bits, fd, j, sk12), nil
	case insnFormatJK:
		j := regInt(insn.rj)
		k := regInt(insn.rk)
		return encodeJKSlots(enc.bits, j, k), nil
	case insnFormatJKUd5:
		j := regInt(insn.rj)
		k := regInt(insn.rk)
		ud5 := uint32(insn.imm1) & 0x1f
		return encodeDJKSlots(enc.bits, ud5, j, k), nil
	case insnFormatJSd5k16:
		j := regInt(insn.rj)
		sd5k16 := uint32(insn.imm1) & 0x1fffff
		return encodeDJKSlots(enc.bits, sd5k16>>16&0x1f, j, sd5k16&0xffff), nil
	case insnFormatJUd5:
		j := regInt(insn.rj)
		ud5 := uint32(insn.imm1) & 0x1f
		return encodeDJSlots(enc.bits, ud5, j), nil
	case insnFormatJUd5Sk12:
		j := regInt(insn.rj)
		ud5 := uint32(insn.imm1) & 0x1f
		sk12 := uint32(insn.imm2) & 0xfff
		return encodeDJKSlots(enc.bits, ud5, j, sk12), nil
	case insnFormatJUk8:
		j := regInt(insn.rj)
		uk8 := uint32(insn.imm1) & 0xff
		return encodeJKSlots(enc.bits, j, uk8), nil
	case insnFormatSd10k16:
		sd10k16 := uint32(insn.imm1) & 0x3ffffff
		return encodeDKSlots(enc.bits, sd10k16>>16&0x3ff, sd10k16&0xffff), nil
	case insnFormatUd15:
		ud15 := uint32(insn.imm1) & 0x7fff
		return encodeDSlot(enc.bits, ud15), nil
	default:
		panic("should never happen: unknown format for real insn")
	}
}

type encoding struct {
	bits uint32
	fmt  insnFormat
}

var encodings = [ALAST & obj.AMask]encoding{
	ACLOW & obj.AMask:       {bits: 0x00001000, fmt: insnFormatDJ},
	ACLZW & obj.AMask:       {bits: 0x00001400, fmt: insnFormatDJ},
	ACTOW & obj.AMask:       {bits: 0x00001800, fmt: insnFormatDJ},
	ACTZW & obj.AMask:       {bits: 0x00001c00, fmt: insnFormatDJ},
	ACLOD & obj.AMask:       {bits: 0x00002000, fmt: insnFormatDJ},
	ACLZD & obj.AMask:       {bits: 0x00002400, fmt: insnFormatDJ},
	ACTOD & obj.AMask:       {bits: 0x00002800, fmt: insnFormatDJ},
	ACTZD & obj.AMask:       {bits: 0x00002c00, fmt: insnFormatDJ},
	AREVB2H & obj.AMask:     {bits: 0x00003000, fmt: insnFormatDJ},
	AREVB4H & obj.AMask:     {bits: 0x00003400, fmt: insnFormatDJ},
	AREVB2W & obj.AMask:     {bits: 0x00003800, fmt: insnFormatDJ},
	AREVBD & obj.AMask:      {bits: 0x00003c00, fmt: insnFormatDJ},
	AREVH2W & obj.AMask:     {bits: 0x00004000, fmt: insnFormatDJ},
	AREVHD & obj.AMask:      {bits: 0x00004400, fmt: insnFormatDJ},
	ABITREV4B & obj.AMask:   {bits: 0x00004800, fmt: insnFormatDJ},
	ABITREV8B & obj.AMask:   {bits: 0x00004c00, fmt: insnFormatDJ},
	ABITREVW & obj.AMask:    {bits: 0x00005000, fmt: insnFormatDJ},
	ABITREVD & obj.AMask:    {bits: 0x00005400, fmt: insnFormatDJ},
	ASEXTH & obj.AMask:      {bits: 0x00005800, fmt: insnFormatDJ},
	ASEXTB & obj.AMask:      {bits: 0x00005c00, fmt: insnFormatDJ},
	ARDTICKLW & obj.AMask:   {bits: 0x00006000, fmt: insnFormatDJ},
	ARDTICKHW & obj.AMask:   {bits: 0x00006400, fmt: insnFormatDJ},
	ARDTICKD & obj.AMask:    {bits: 0x00006800, fmt: insnFormatDJ},
	ACPUCFG & obj.AMask:     {bits: 0x00006c00, fmt: insnFormatDJ},
	AASRTLE & obj.AMask:     {bits: 0x00010000, fmt: insnFormatJK},
	AASRTGT & obj.AMask:     {bits: 0x00018000, fmt: insnFormatJK},
	AALSLW & obj.AMask:      {bits: 0x00040000, fmt: insnFormatDJKUa2},
	AALSLWU & obj.AMask:     {bits: 0x00060000, fmt: insnFormatDJKUa2},
	ABYTEPICKW & obj.AMask:  {bits: 0x00080000, fmt: insnFormatDJKUa2},
	ABYTEPICKD & obj.AMask:  {bits: 0x000c0000, fmt: insnFormatDJKUa3},
	AADDW & obj.AMask:       {bits: 0x00100000, fmt: insnFormatDJK},
	AADDD & obj.AMask:       {bits: 0x00108000, fmt: insnFormatDJK},
	ASUBW & obj.AMask:       {bits: 0x00110000, fmt: insnFormatDJK},
	ASUBD & obj.AMask:       {bits: 0x00118000, fmt: insnFormatDJK},
	ASLT & obj.AMask:        {bits: 0x00120000, fmt: insnFormatDJK},
	ASLTU & obj.AMask:       {bits: 0x00128000, fmt: insnFormatDJK},
	AMASKEQZ & obj.AMask:    {bits: 0x00130000, fmt: insnFormatDJK},
	AMASKNEZ & obj.AMask:    {bits: 0x00138000, fmt: insnFormatDJK},
	ANOR & obj.AMask:        {bits: 0x00140000, fmt: insnFormatDJK},
	AAND & obj.AMask:        {bits: 0x00148000, fmt: insnFormatDJK},
	AOR & obj.AMask:         {bits: 0x00150000, fmt: insnFormatDJK},
	AXOR & obj.AMask:        {bits: 0x00158000, fmt: insnFormatDJK},
	AORN & obj.AMask:        {bits: 0x00160000, fmt: insnFormatDJK},
	AANDN & obj.AMask:       {bits: 0x00168000, fmt: insnFormatDJK},
	ASLLW & obj.AMask:       {bits: 0x00170000, fmt: insnFormatDJK},
	ASRLW & obj.AMask:       {bits: 0x00178000, fmt: insnFormatDJK},
	ASRAW & obj.AMask:       {bits: 0x00180000, fmt: insnFormatDJK},
	ASLLD & obj.AMask:       {bits: 0x00188000, fmt: insnFormatDJK},
	ASRLD & obj.AMask:       {bits: 0x00190000, fmt: insnFormatDJK},
	ASRAD & obj.AMask:       {bits: 0x00198000, fmt: insnFormatDJK},
	AROTRW & obj.AMask:      {bits: 0x001b0000, fmt: insnFormatDJK},
	AROTRD & obj.AMask:      {bits: 0x001b8000, fmt: insnFormatDJK},
	AMULW & obj.AMask:       {bits: 0x001c0000, fmt: insnFormatDJK},
	AMULHW & obj.AMask:      {bits: 0x001c8000, fmt: insnFormatDJK},
	AMULHWU & obj.AMask:     {bits: 0x001d0000, fmt: insnFormatDJK},
	AMULD & obj.AMask:       {bits: 0x001d8000, fmt: insnFormatDJK},
	AMULHD & obj.AMask:      {bits: 0x001e0000, fmt: insnFormatDJK},
	AMULHDU & obj.AMask:     {bits: 0x001e8000, fmt: insnFormatDJK},
	AMULWDW & obj.AMask:     {bits: 0x001f0000, fmt: insnFormatDJK},
	AMULWDWU & obj.AMask:    {bits: 0x001f8000, fmt: insnFormatDJK},
	ADIVW & obj.AMask:       {bits: 0x00200000, fmt: insnFormatDJK},
	AMODW & obj.AMask:       {bits: 0x00208000, fmt: insnFormatDJK},
	ADIVWU & obj.AMask:      {bits: 0x00210000, fmt: insnFormatDJK},
	AMODWU & obj.AMask:      {bits: 0x00218000, fmt: insnFormatDJK},
	ADIVD & obj.AMask:       {bits: 0x00220000, fmt: insnFormatDJK},
	AMODD & obj.AMask:       {bits: 0x00228000, fmt: insnFormatDJK},
	ADIVDU & obj.AMask:      {bits: 0x00230000, fmt: insnFormatDJK},
	AMODDU & obj.AMask:      {bits: 0x00238000, fmt: insnFormatDJK},
	ACRCWBW & obj.AMask:     {bits: 0x00240000, fmt: insnFormatDJK},
	ACRCWHW & obj.AMask:     {bits: 0x00248000, fmt: insnFormatDJK},
	ACRCWWW & obj.AMask:     {bits: 0x00250000, fmt: insnFormatDJK},
	ACRCWDW & obj.AMask:     {bits: 0x00258000, fmt: insnFormatDJK},
	ACRCCWBW & obj.AMask:    {bits: 0x00260000, fmt: insnFormatDJK},
	ACRCCWHW & obj.AMask:    {bits: 0x00268000, fmt: insnFormatDJK},
	ACRCCWWW & obj.AMask:    {bits: 0x00270000, fmt: insnFormatDJK},
	ACRCCWDW & obj.AMask:    {bits: 0x00278000, fmt: insnFormatDJK},
	ABREAK & obj.AMask:      {bits: 0x002a0000, fmt: insnFormatUd15},
	ADBGCALL & obj.AMask:    {bits: 0x002a8000, fmt: insnFormatUd15},
	ASYSCALL & obj.AMask:    {bits: 0x002b0000, fmt: insnFormatUd15},
	AALSLD & obj.AMask:      {bits: 0x002c0000, fmt: insnFormatDJKUa2},
	ASLLIW & obj.AMask:      {bits: 0x00408000, fmt: insnFormatDJUk5},
	ASLLID & obj.AMask:      {bits: 0x00410000, fmt: insnFormatDJUk6},
	ASRLIW & obj.AMask:      {bits: 0x00448000, fmt: insnFormatDJUk5},
	ASRLID & obj.AMask:      {bits: 0x00450000, fmt: insnFormatDJUk6},
	ASRAIW & obj.AMask:      {bits: 0x00488000, fmt: insnFormatDJUk5},
	ASRAID & obj.AMask:      {bits: 0x00490000, fmt: insnFormatDJUk6},
	AROTRIW & obj.AMask:     {bits: 0x004c8000, fmt: insnFormatDJUk5},
	AROTRID & obj.AMask:     {bits: 0x004d0000, fmt: insnFormatDJUk6},
	ABSTRINSW & obj.AMask:   {bits: 0x00600000, fmt: insnFormatDJUk5Um5},
	ABSTRPICKW & obj.AMask:  {bits: 0x00608000, fmt: insnFormatDJUk5Um5},
	ABSTRINSD & obj.AMask:   {bits: 0x00800000, fmt: insnFormatDJUk6Um6},
	ABSTRPICKD & obj.AMask:  {bits: 0x00c00000, fmt: insnFormatDJUk6Um6},
	AFADDS & obj.AMask:      {bits: 0x01008000, fmt: insnFormatFdFjFk},
	AFADDD & obj.AMask:      {bits: 0x01010000, fmt: insnFormatFdFjFk},
	AFSUBS & obj.AMask:      {bits: 0x01028000, fmt: insnFormatFdFjFk},
	AFSUBD & obj.AMask:      {bits: 0x01030000, fmt: insnFormatFdFjFk},
	AFMULS & obj.AMask:      {bits: 0x01048000, fmt: insnFormatFdFjFk},
	AFMULD & obj.AMask:      {bits: 0x01050000, fmt: insnFormatFdFjFk},
	AFDIVS & obj.AMask:      {bits: 0x01068000, fmt: insnFormatFdFjFk},
	AFDIVD & obj.AMask:      {bits: 0x01070000, fmt: insnFormatFdFjFk},
	AFMAXS & obj.AMask:      {bits: 0x01088000, fmt: insnFormatFdFjFk},
	AFMAXD & obj.AMask:      {bits: 0x01090000, fmt: insnFormatFdFjFk},
	AFMINS & obj.AMask:      {bits: 0x010a8000, fmt: insnFormatFdFjFk},
	AFMIND & obj.AMask:      {bits: 0x010b0000, fmt: insnFormatFdFjFk},
	AFMAXAS & obj.AMask:     {bits: 0x010c8000, fmt: insnFormatFdFjFk},
	AFMAXAD & obj.AMask:     {bits: 0x010d0000, fmt: insnFormatFdFjFk},
	AFMINAS & obj.AMask:     {bits: 0x010e8000, fmt: insnFormatFdFjFk},
	AFMINAD & obj.AMask:     {bits: 0x010f0000, fmt: insnFormatFdFjFk},
	AFSCALEBS & obj.AMask:   {bits: 0x01108000, fmt: insnFormatFdFjFk},
	AFSCALEBD & obj.AMask:   {bits: 0x01110000, fmt: insnFormatFdFjFk},
	AFCOPYSIGNS & obj.AMask: {bits: 0x01128000, fmt: insnFormatFdFjFk},
	AFCOPYSIGND & obj.AMask: {bits: 0x01130000, fmt: insnFormatFdFjFk},
	AFABSS & obj.AMask:      {bits: 0x01140400, fmt: insnFormatFdFj},
	AFABSD & obj.AMask:      {bits: 0x01140800, fmt: insnFormatFdFj},
	AFNEGS & obj.AMask:      {bits: 0x01141400, fmt: insnFormatFdFj},
	AFNEGD & obj.AMask:      {bits: 0x01141800, fmt: insnFormatFdFj},
	AFLOGBS & obj.AMask:     {bits: 0x01142400, fmt: insnFormatFdFj},
	AFLOGBD & obj.AMask:     {bits: 0x01142800, fmt: insnFormatFdFj},
	AFCLASSS & obj.AMask:    {bits: 0x01143400, fmt: insnFormatFdFj},
	AFCLASSD & obj.AMask:    {bits: 0x01143800, fmt: insnFormatFdFj},
	AFSQRTS & obj.AMask:     {bits: 0x01144400, fmt: insnFormatFdFj},
	AFSQRTD & obj.AMask:     {bits: 0x01144800, fmt: insnFormatFdFj},
	AFRECIPS & obj.AMask:    {bits: 0x01145400, fmt: insnFormatFdFj},
	AFRECIPD & obj.AMask:    {bits: 0x01145800, fmt: insnFormatFdFj},
	AFRSQRTS & obj.AMask:    {bits: 0x01146400, fmt: insnFormatFdFj},
	AFRSQRTD & obj.AMask:    {bits: 0x01146800, fmt: insnFormatFdFj},
	AFMOVS & obj.AMask:      {bits: 0x01149400, fmt: insnFormatFdFj},
	AFMOVD & obj.AMask:      {bits: 0x01149800, fmt: insnFormatFdFj},
	AMOVGR2FRW & obj.AMask:  {bits: 0x0114a400, fmt: insnFormatFdJ},
	AMOVGR2FRD & obj.AMask:  {bits: 0x0114a800, fmt: insnFormatFdJ},
	AMOVGR2FRHW & obj.AMask: {bits: 0x0114ac00, fmt: insnFormatFdJ},
	AMOVFR2GRS & obj.AMask:  {bits: 0x0114b400, fmt: insnFormatDFj},
	AMOVFR2GRD & obj.AMask:  {bits: 0x0114b800, fmt: insnFormatDFj},
	AMOVFRH2GRS & obj.AMask: {bits: 0x0114bc00, fmt: insnFormatDFj},
	AFCSRWR & obj.AMask:     {bits: 0x0114c000, fmt: insnFormatJUd5},
	AFCSRRD & obj.AMask:     {bits: 0x0114c800, fmt: insnFormatDUj5},
	AMOVFR2FCC & obj.AMask:  {bits: 0x0114d000, fmt: insnFormatCdFj},
	AMOVFCC2FR & obj.AMask:  {bits: 0x0114d400, fmt: insnFormatFdCj},
	AMOVGR2FCC & obj.AMask:  {bits: 0x0114d800, fmt: insnFormatCdJ},
	AMOVFCC2GR & obj.AMask:  {bits: 0x0114dc00, fmt: insnFormatDCj},
	AFCVTSD & obj.AMask:     {bits: 0x01191800, fmt: insnFormatFdFj},
	AFCVTDS & obj.AMask:     {bits: 0x01192400, fmt: insnFormatFdFj},
	AFTINTRMWS & obj.AMask:  {bits: 0x011a0400, fmt: insnFormatFdFj},
	AFTINTRMWD & obj.AMask:  {bits: 0x011a0800, fmt: insnFormatFdFj},
	AFTINTRMLS & obj.AMask:  {bits: 0x011a2400, fmt: insnFormatFdFj},
	AFTINTRMLD & obj.AMask:  {bits: 0x011a2800, fmt: insnFormatFdFj},
	AFTINTRPWS & obj.AMask:  {bits: 0x011a4400, fmt: insnFormatFdFj},
	AFTINTRPWD & obj.AMask:  {bits: 0x011a4800, fmt: insnFormatFdFj},
	AFTINTRPLS & obj.AMask:  {bits: 0x011a6400, fmt: insnFormatFdFj},
	AFTINTRPLD & obj.AMask:  {bits: 0x011a6800, fmt: insnFormatFdFj},
	AFTINTRZWS & obj.AMask:  {bits: 0x011a8400, fmt: insnFormatFdFj},
	AFTINTRZWD & obj.AMask:  {bits: 0x011a8800, fmt: insnFormatFdFj},
	AFTINTRZLS & obj.AMask:  {bits: 0x011aa400, fmt: insnFormatFdFj},
	AFTINTRZLD & obj.AMask:  {bits: 0x011aa800, fmt: insnFormatFdFj},
	AFTINTRNEWS & obj.AMask: {bits: 0x011ac400, fmt: insnFormatFdFj},
	AFTINTRNEWD & obj.AMask: {bits: 0x011ac800, fmt: insnFormatFdFj},
	AFTINTRNELS & obj.AMask: {bits: 0x011ae400, fmt: insnFormatFdFj},
	AFTINTRNELD & obj.AMask: {bits: 0x011ae800, fmt: insnFormatFdFj},
	AFTINTWS & obj.AMask:    {bits: 0x011b0400, fmt: insnFormatFdFj},
	AFTINTWD & obj.AMask:    {bits: 0x011b0800, fmt: insnFormatFdFj},
	AFTINTLS & obj.AMask:    {bits: 0x011b2400, fmt: insnFormatFdFj},
	AFTINTLD & obj.AMask:    {bits: 0x011b2800, fmt: insnFormatFdFj},
	AFFINTSW & obj.AMask:    {bits: 0x011d1000, fmt: insnFormatFdFj},
	AFFINTSL & obj.AMask:    {bits: 0x011d1800, fmt: insnFormatFdFj},
	AFFINTDW & obj.AMask:    {bits: 0x011d2000, fmt: insnFormatFdFj},
	AFFINTDL & obj.AMask:    {bits: 0x011d2800, fmt: insnFormatFdFj},
	AFRINTS & obj.AMask:     {bits: 0x011e4400, fmt: insnFormatFdFj},
	AFRINTD & obj.AMask:     {bits: 0x011e4800, fmt: insnFormatFdFj},
	ASLTI & obj.AMask:       {bits: 0x02000000, fmt: insnFormatDJSk12},
	ASLTUI & obj.AMask:      {bits: 0x02400000, fmt: insnFormatDJSk12},
	AADDIW & obj.AMask:      {bits: 0x02800000, fmt: insnFormatDJSk12},
	AADDID & obj.AMask:      {bits: 0x02c00000, fmt: insnFormatDJSk12},
	ALU52ID & obj.AMask:     {bits: 0x03000000, fmt: insnFormatDJSk12},
	AANDI & obj.AMask:       {bits: 0x03400000, fmt: insnFormatDJUk12},
	AORI & obj.AMask:        {bits: 0x03800000, fmt: insnFormatDJUk12},
	AXORI & obj.AMask:       {bits: 0x03c00000, fmt: insnFormatDJUk12},
	ACSRXCHG & obj.AMask:    {bits: 0x04000000, fmt: insnFormatDJUk14},
	ACACOP & obj.AMask:      {bits: 0x06000000, fmt: insnFormatJUd5Sk12},
	ALDDIR & obj.AMask:      {bits: 0x06400000, fmt: insnFormatDJUk8},
	ALDPTE & obj.AMask:      {bits: 0x06440000, fmt: insnFormatJUk8},
	AIOCSRRDB & obj.AMask:   {bits: 0x06480000, fmt: insnFormatDJ},
	AIOCSRRDH & obj.AMask:   {bits: 0x06480400, fmt: insnFormatDJ},
	AIOCSRRDW & obj.AMask:   {bits: 0x06480800, fmt: insnFormatDJ},
	AIOCSRRDD & obj.AMask:   {bits: 0x06480c00, fmt: insnFormatDJ},
	AIOCSRWRB & obj.AMask:   {bits: 0x06481000, fmt: insnFormatDJ},
	AIOCSRWRH & obj.AMask:   {bits: 0x06481400, fmt: insnFormatDJ},
	AIOCSRWRW & obj.AMask:   {bits: 0x06481800, fmt: insnFormatDJ},
	AIOCSRWRD & obj.AMask:   {bits: 0x06481c00, fmt: insnFormatDJ},
	ATLBCLR & obj.AMask:     {bits: 0x06482000, fmt: insnFormatEMPTY},
	ATLBFLUSH & obj.AMask:   {bits: 0x06482400, fmt: insnFormatEMPTY},
	ATLBSRCH & obj.AMask:    {bits: 0x06482800, fmt: insnFormatEMPTY},
	ATLBRD & obj.AMask:      {bits: 0x06482c00, fmt: insnFormatEMPTY},
	ATLBWR & obj.AMask:      {bits: 0x06483000, fmt: insnFormatEMPTY},
	ATLBFILL & obj.AMask:    {bits: 0x06483400, fmt: insnFormatEMPTY},
	AERET & obj.AMask:       {bits: 0x06483800, fmt: insnFormatEMPTY},
	AIDLE & obj.AMask:       {bits: 0x06488000, fmt: insnFormatUd15},
	ATLBINV & obj.AMask:     {bits: 0x06498000, fmt: insnFormatJKUd5},
	AFMADDS & obj.AMask:     {bits: 0x08100000, fmt: insnFormatFdFjFkFa},
	AFMADDD & obj.AMask:     {bits: 0x08200000, fmt: insnFormatFdFjFkFa},
	AFMSUBS & obj.AMask:     {bits: 0x08500000, fmt: insnFormatFdFjFkFa},
	AFMSUBD & obj.AMask:     {bits: 0x08600000, fmt: insnFormatFdFjFkFa},
	AFNMADDS & obj.AMask:    {bits: 0x08900000, fmt: insnFormatFdFjFkFa},
	AFNMADDD & obj.AMask:    {bits: 0x08a00000, fmt: insnFormatFdFjFkFa},
	AFNMSUBS & obj.AMask:    {bits: 0x08d00000, fmt: insnFormatFdFjFkFa},
	AFNMSUBD & obj.AMask:    {bits: 0x08e00000, fmt: insnFormatFdFjFkFa},
	AFCMPCAFS & obj.AMask:   {bits: 0x0c100000, fmt: insnFormatCdFjFk},
	AFCMPSAFS & obj.AMask:   {bits: 0x0c108000, fmt: insnFormatCdFjFk},
	AFCMPCLTS & obj.AMask:   {bits: 0x0c110000, fmt: insnFormatCdFjFk},
	AFCMPSLTS & obj.AMask:   {bits: 0x0c118000, fmt: insnFormatCdFjFk},
	AFCMPCEQS & obj.AMask:   {bits: 0x0c120000, fmt: insnFormatCdFjFk},
	AFCMPSEQS & obj.AMask:   {bits: 0x0c128000, fmt: insnFormatCdFjFk},
	AFCMPCLES & obj.AMask:   {bits: 0x0c130000, fmt: insnFormatCdFjFk},
	AFCMPSLES & obj.AMask:   {bits: 0x0c138000, fmt: insnFormatCdFjFk},
	AFCMPCUNS & obj.AMask:   {bits: 0x0c140000, fmt: insnFormatCdFjFk},
	AFCMPSUNS & obj.AMask:   {bits: 0x0c148000, fmt: insnFormatCdFjFk},
	AFCMPCULTS & obj.AMask:  {bits: 0x0c150000, fmt: insnFormatCdFjFk},
	AFCMPSULTS & obj.AMask:  {bits: 0x0c158000, fmt: insnFormatCdFjFk},
	AFCMPCUEQS & obj.AMask:  {bits: 0x0c160000, fmt: insnFormatCdFjFk},
	AFCMPSUEQS & obj.AMask:  {bits: 0x0c168000, fmt: insnFormatCdFjFk},
	AFCMPCULES & obj.AMask:  {bits: 0x0c170000, fmt: insnFormatCdFjFk},
	AFCMPSULES & obj.AMask:  {bits: 0x0c178000, fmt: insnFormatCdFjFk},
	AFCMPCNES & obj.AMask:   {bits: 0x0c180000, fmt: insnFormatCdFjFk},
	AFCMPSNES & obj.AMask:   {bits: 0x0c188000, fmt: insnFormatCdFjFk},
	AFCMPCORS & obj.AMask:   {bits: 0x0c1a0000, fmt: insnFormatCdFjFk},
	AFCMPSORS & obj.AMask:   {bits: 0x0c1a8000, fmt: insnFormatCdFjFk},
	AFCMPCUNES & obj.AMask:  {bits: 0x0c1c0000, fmt: insnFormatCdFjFk},
	AFCMPSUNES & obj.AMask:  {bits: 0x0c1c8000, fmt: insnFormatCdFjFk},
	AFCMPCAFD & obj.AMask:   {bits: 0x0c200000, fmt: insnFormatCdFjFk},
	AFCMPSAFD & obj.AMask:   {bits: 0x0c208000, fmt: insnFormatCdFjFk},
	AFCMPCLTD & obj.AMask:   {bits: 0x0c210000, fmt: insnFormatCdFjFk},
	AFCMPSLTD & obj.AMask:   {bits: 0x0c218000, fmt: insnFormatCdFjFk},
	AFCMPCEQD & obj.AMask:   {bits: 0x0c220000, fmt: insnFormatCdFjFk},
	AFCMPSEQD & obj.AMask:   {bits: 0x0c228000, fmt: insnFormatCdFjFk},
	AFCMPCLED & obj.AMask:   {bits: 0x0c230000, fmt: insnFormatCdFjFk},
	AFCMPSLED & obj.AMask:   {bits: 0x0c238000, fmt: insnFormatCdFjFk},
	AFCMPCUND & obj.AMask:   {bits: 0x0c240000, fmt: insnFormatCdFjFk},
	AFCMPSUND & obj.AMask:   {bits: 0x0c248000, fmt: insnFormatCdFjFk},
	AFCMPCULTD & obj.AMask:  {bits: 0x0c250000, fmt: insnFormatCdFjFk},
	AFCMPSULTD & obj.AMask:  {bits: 0x0c258000, fmt: insnFormatCdFjFk},
	AFCMPCUEQD & obj.AMask:  {bits: 0x0c260000, fmt: insnFormatCdFjFk},
	AFCMPSUEQD & obj.AMask:  {bits: 0x0c268000, fmt: insnFormatCdFjFk},
	AFCMPCULED & obj.AMask:  {bits: 0x0c270000, fmt: insnFormatCdFjFk},
	AFCMPSULED & obj.AMask:  {bits: 0x0c278000, fmt: insnFormatCdFjFk},
	AFCMPCNED & obj.AMask:   {bits: 0x0c280000, fmt: insnFormatCdFjFk},
	AFCMPSNED & obj.AMask:   {bits: 0x0c288000, fmt: insnFormatCdFjFk},
	AFCMPCORD & obj.AMask:   {bits: 0x0c2a0000, fmt: insnFormatCdFjFk},
	AFCMPSORD & obj.AMask:   {bits: 0x0c2a8000, fmt: insnFormatCdFjFk},
	AFCMPCUNED & obj.AMask:  {bits: 0x0c2c0000, fmt: insnFormatCdFjFk},
	AFCMPSUNED & obj.AMask:  {bits: 0x0c2c8000, fmt: insnFormatCdFjFk},
	AFSEL & obj.AMask:       {bits: 0x0d000000, fmt: insnFormatFdFjFkCa},
	AADDU16ID & obj.AMask:   {bits: 0x10000000, fmt: insnFormatDJSk16},
	ALU12IW & obj.AMask:     {bits: 0x14000000, fmt: insnFormatDSj20},
	ALU32ID & obj.AMask:     {bits: 0x16000000, fmt: insnFormatDSj20},
	APCADDI & obj.AMask:     {bits: 0x18000000, fmt: insnFormatDSj20},
	APCALAU12I & obj.AMask:  {bits: 0x1a000000, fmt: insnFormatDSj20},
	APCADDU12I & obj.AMask:  {bits: 0x1c000000, fmt: insnFormatDSj20},
	APCADDU18I & obj.AMask:  {bits: 0x1e000000, fmt: insnFormatDSj20},
	ALLW & obj.AMask:        {bits: 0x20000000, fmt: insnFormatDJSk14},
	ASCW & obj.AMask:        {bits: 0x21000000, fmt: insnFormatDJSk14},
	ALLD & obj.AMask:        {bits: 0x22000000, fmt: insnFormatDJSk14},
	ASCD & obj.AMask:        {bits: 0x23000000, fmt: insnFormatDJSk14},
	ALDOX4W & obj.AMask:     {bits: 0x24000000, fmt: insnFormatDJSk14},
	ASTOX4W & obj.AMask:     {bits: 0x25000000, fmt: insnFormatDJSk14},
	ALDOX4D & obj.AMask:     {bits: 0x26000000, fmt: insnFormatDJSk14},
	ASTOX4D & obj.AMask:     {bits: 0x27000000, fmt: insnFormatDJSk14},
	ALDB & obj.AMask:        {bits: 0x28000000, fmt: insnFormatDJSk12},
	ALDH & obj.AMask:        {bits: 0x28400000, fmt: insnFormatDJSk12},
	ALDW & obj.AMask:        {bits: 0x28800000, fmt: insnFormatDJSk12},
	ALDD & obj.AMask:        {bits: 0x28c00000, fmt: insnFormatDJSk12},
	ASTB & obj.AMask:        {bits: 0x29000000, fmt: insnFormatDJSk12},
	ASTH & obj.AMask:        {bits: 0x29400000, fmt: insnFormatDJSk12},
	ASTW & obj.AMask:        {bits: 0x29800000, fmt: insnFormatDJSk12},
	ASTD & obj.AMask:        {bits: 0x29c00000, fmt: insnFormatDJSk12},
	ALDBU & obj.AMask:       {bits: 0x2a000000, fmt: insnFormatDJSk12},
	ALDHU & obj.AMask:       {bits: 0x2a400000, fmt: insnFormatDJSk12},
	ALDWU & obj.AMask:       {bits: 0x2a800000, fmt: insnFormatDJSk12},
	APRELD & obj.AMask:      {bits: 0x2ac00000, fmt: insnFormatJUd5Sk12},
	AFLDS & obj.AMask:       {bits: 0x2b000000, fmt: insnFormatFdJSk12},
	AFSTS & obj.AMask:       {bits: 0x2b400000, fmt: insnFormatFdJSk12},
	AFLDD & obj.AMask:       {bits: 0x2b800000, fmt: insnFormatFdJSk12},
	AFSTD & obj.AMask:       {bits: 0x2bc00000, fmt: insnFormatFdJSk12},
	ALDXB & obj.AMask:       {bits: 0x38000000, fmt: insnFormatDJK},
	ALDXH & obj.AMask:       {bits: 0x38040000, fmt: insnFormatDJK},
	ALDXW & obj.AMask:       {bits: 0x38080000, fmt: insnFormatDJK},
	ALDXD & obj.AMask:       {bits: 0x380c0000, fmt: insnFormatDJK},
	ASTXB & obj.AMask:       {bits: 0x38100000, fmt: insnFormatDJK},
	ASTXH & obj.AMask:       {bits: 0x38140000, fmt: insnFormatDJK},
	ASTXW & obj.AMask:       {bits: 0x38180000, fmt: insnFormatDJK},
	ASTXD & obj.AMask:       {bits: 0x381c0000, fmt: insnFormatDJK},
	ALDXBU & obj.AMask:      {bits: 0x38200000, fmt: insnFormatDJK},
	ALDXHU & obj.AMask:      {bits: 0x38240000, fmt: insnFormatDJK},
	ALDXWU & obj.AMask:      {bits: 0x38280000, fmt: insnFormatDJK},
	APRELDX & obj.AMask:     {bits: 0x382c0000, fmt: insnFormatJKUd5},
	AFLDXS & obj.AMask:      {bits: 0x38300000, fmt: insnFormatFdJK},
	AFLDXD & obj.AMask:      {bits: 0x38340000, fmt: insnFormatFdJK},
	AFSTXS & obj.AMask:      {bits: 0x38380000, fmt: insnFormatFdJK},
	AFSTXD & obj.AMask:      {bits: 0x383c0000, fmt: insnFormatFdJK},
	AAMSWAPW & obj.AMask:    {bits: 0x38600000, fmt: insnFormatDJK},
	AAMSWAPD & obj.AMask:    {bits: 0x38608000, fmt: insnFormatDJK},
	AAMADDW & obj.AMask:     {bits: 0x38610000, fmt: insnFormatDJK},
	AAMADDD & obj.AMask:     {bits: 0x38618000, fmt: insnFormatDJK},
	AAMANDW & obj.AMask:     {bits: 0x38620000, fmt: insnFormatDJK},
	AAMANDD & obj.AMask:     {bits: 0x38628000, fmt: insnFormatDJK},
	AAMORW & obj.AMask:      {bits: 0x38630000, fmt: insnFormatDJK},
	AAMORD & obj.AMask:      {bits: 0x38638000, fmt: insnFormatDJK},
	AAMXORW & obj.AMask:     {bits: 0x38640000, fmt: insnFormatDJK},
	AAMXORD & obj.AMask:     {bits: 0x38648000, fmt: insnFormatDJK},
	AAMMAXW & obj.AMask:     {bits: 0x38650000, fmt: insnFormatDJK},
	AAMMAXD & obj.AMask:     {bits: 0x38658000, fmt: insnFormatDJK},
	AAMMINW & obj.AMask:     {bits: 0x38660000, fmt: insnFormatDJK},
	AAMMIND & obj.AMask:     {bits: 0x38668000, fmt: insnFormatDJK},
	AAMMAXWU & obj.AMask:    {bits: 0x38670000, fmt: insnFormatDJK},
	AAMMAXDU & obj.AMask:    {bits: 0x38678000, fmt: insnFormatDJK},
	AAMMINWU & obj.AMask:    {bits: 0x38680000, fmt: insnFormatDJK},
	AAMMINDU & obj.AMask:    {bits: 0x38688000, fmt: insnFormatDJK},
	AAMSWAPDBW & obj.AMask:  {bits: 0x38690000, fmt: insnFormatDJK},
	AAMSWAPDBD & obj.AMask:  {bits: 0x38698000, fmt: insnFormatDJK},
	AAMADDDBW & obj.AMask:   {bits: 0x386a0000, fmt: insnFormatDJK},
	AAMADDDBD & obj.AMask:   {bits: 0x386a8000, fmt: insnFormatDJK},
	AAMANDDBW & obj.AMask:   {bits: 0x386b0000, fmt: insnFormatDJK},
	AAMANDDBD & obj.AMask:   {bits: 0x386b8000, fmt: insnFormatDJK},
	AAMORDBW & obj.AMask:    {bits: 0x386c0000, fmt: insnFormatDJK},
	AAMORDBD & obj.AMask:    {bits: 0x386c8000, fmt: insnFormatDJK},
	AAMXORDBW & obj.AMask:   {bits: 0x386d0000, fmt: insnFormatDJK},
	AAMXORDBD & obj.AMask:   {bits: 0x386d8000, fmt: insnFormatDJK},
	AAMMAXDBW & obj.AMask:   {bits: 0x386e0000, fmt: insnFormatDJK},
	AAMMAXDBD & obj.AMask:   {bits: 0x386e8000, fmt: insnFormatDJK},
	AAMMINDBW & obj.AMask:   {bits: 0x386f0000, fmt: insnFormatDJK},
	AAMMINDBD & obj.AMask:   {bits: 0x386f8000, fmt: insnFormatDJK},
	AAMMAXDBWU & obj.AMask:  {bits: 0x38700000, fmt: insnFormatDJK},
	AAMMAXDBDU & obj.AMask:  {bits: 0x38708000, fmt: insnFormatDJK},
	AAMMINDBWU & obj.AMask:  {bits: 0x38710000, fmt: insnFormatDJK},
	AAMMINDBDU & obj.AMask:  {bits: 0x38718000, fmt: insnFormatDJK},
	ADBAR & obj.AMask:       {bits: 0x38720000, fmt: insnFormatUd15},
	AIBAR & obj.AMask:       {bits: 0x38728000, fmt: insnFormatUd15},
	AFLDGTS & obj.AMask:     {bits: 0x38740000, fmt: insnFormatFdJK},
	AFLDGTD & obj.AMask:     {bits: 0x38748000, fmt: insnFormatFdJK},
	AFLDLES & obj.AMask:     {bits: 0x38750000, fmt: insnFormatFdJK},
	AFLDLED & obj.AMask:     {bits: 0x38758000, fmt: insnFormatFdJK},
	AFSTGTS & obj.AMask:     {bits: 0x38760000, fmt: insnFormatFdJK},
	AFSTGTD & obj.AMask:     {bits: 0x38768000, fmt: insnFormatFdJK},
	AFSTLES & obj.AMask:     {bits: 0x38770000, fmt: insnFormatFdJK},
	AFSTLED & obj.AMask:     {bits: 0x38778000, fmt: insnFormatFdJK},
	ALDGTB & obj.AMask:      {bits: 0x38780000, fmt: insnFormatDJK},
	ALDGTH & obj.AMask:      {bits: 0x38788000, fmt: insnFormatDJK},
	ALDGTW & obj.AMask:      {bits: 0x38790000, fmt: insnFormatDJK},
	ALDGTD & obj.AMask:      {bits: 0x38798000, fmt: insnFormatDJK},
	ALDLEB & obj.AMask:      {bits: 0x387a0000, fmt: insnFormatDJK},
	ALDLEH & obj.AMask:      {bits: 0x387a8000, fmt: insnFormatDJK},
	ALDLEW & obj.AMask:      {bits: 0x387b0000, fmt: insnFormatDJK},
	ALDLED & obj.AMask:      {bits: 0x387b8000, fmt: insnFormatDJK},
	ASTGTB & obj.AMask:      {bits: 0x387c0000, fmt: insnFormatDJK},
	ASTGTH & obj.AMask:      {bits: 0x387c8000, fmt: insnFormatDJK},
	ASTGTW & obj.AMask:      {bits: 0x387d0000, fmt: insnFormatDJK},
	ASTGTD & obj.AMask:      {bits: 0x387d8000, fmt: insnFormatDJK},
	ASTLEB & obj.AMask:      {bits: 0x387e0000, fmt: insnFormatDJK},
	ASTLEH & obj.AMask:      {bits: 0x387e8000, fmt: insnFormatDJK},
	ASTLEW & obj.AMask:      {bits: 0x387f0000, fmt: insnFormatDJK},
	ASTLED & obj.AMask:      {bits: 0x387f8000, fmt: insnFormatDJK},
	ABEQZ & obj.AMask:       {bits: 0x40000000, fmt: insnFormatJSd5k16},
	ABNEZ & obj.AMask:       {bits: 0x44000000, fmt: insnFormatJSd5k16},
	ABCEQZ & obj.AMask:      {bits: 0x48000000, fmt: insnFormatCjSd5k16},
	ABCNEZ & obj.AMask:      {bits: 0x48000100, fmt: insnFormatCjSd5k16},
	AJIRL & obj.AMask:       {bits: 0x4c000000, fmt: insnFormatDJSk16},
	AB & obj.AMask:          {bits: 0x50000000, fmt: insnFormatSd10k16},
	ABL & obj.AMask:         {bits: 0x54000000, fmt: insnFormatSd10k16},
	ABEQ & obj.AMask:        {bits: 0x58000000, fmt: insnFormatDJSk16},
	ABNE & obj.AMask:        {bits: 0x5c000000, fmt: insnFormatDJSk16},
	ABGT & obj.AMask:        {bits: 0x60000000, fmt: insnFormatDJSk16},
	ABLE & obj.AMask:        {bits: 0x64000000, fmt: insnFormatDJSk16},
	ABGTU & obj.AMask:       {bits: 0x68000000, fmt: insnFormatDJSk16},
	ABLEU & obj.AMask:       {bits: 0x6c000000, fmt: insnFormatDJSk16},
}
